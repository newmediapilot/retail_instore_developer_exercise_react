{"version":3,"sources":["models/NavigationModel.js","components/Shuttle/Shuttle.js","components/Navigation/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["NavigationModel","items","label","route","Shuttle","state","shuttleStyle","left","width","window","addEventListener","updateStyleProps","removeEventListener","props","this","targetEl","target","el","previousEl","parentElement","previousElementSibling","offset","getBoundingClientRect","getRelativeOffset","itemWidth","textWidth","querySelector","console","log","newStyle","Object","assign","setState","aria-hidden","className","style","React","Component","Navigation","item","evt","mapped","map","model","active","clickTarget","index","onClick","e","click","key","href","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+UAiCeA,G,MAjCS,CACpBC,MAAO,CACH,CACIC,MAAO,YACPC,MAAO,cAEX,CACID,MAAO,gBACPC,MAAO,gBAEX,CACID,MAAO,SACPC,MAAO,WAEX,CACID,MAAO,YACPC,MAAO,cAEX,CACID,MAAO,QACPC,MAAO,UAEX,CACID,MAAO,YACPC,MAAO,aAEX,CACID,MAAO,SACPC,MAAO,cCmDJC,G,kNAxDXC,MAAQ,CACJC,aAAc,CACVC,KAAM,EACNC,MAAO,I,kEAfM,IAAD,OAChBC,OAAOC,iBAAiB,UAAU,WAC9B,EAAKC,wB,6CAIW,IAAD,OACnBF,OAAOG,oBAAoB,UAAU,WACjC,EAAKD,wB,gDAWaE,GACtBC,KAAKC,SAAWF,EAAMG,OAEtBF,KAAKH,qB,wCAGSM,GAId,IAHA,IACIC,EADKJ,KAAKC,SAASI,cACHC,uBAChBC,EAAS,EACNH,GACHG,GAAUH,EAAWI,wBAAwBd,MAC7CU,EAAaA,EAAWE,uBAE5B,OAAOC,I,yCAIP,GAAKP,KAAKC,SAAV,CAEA,IAAIM,EAASP,KAAKS,kBAAkBT,KAAKC,UACrCS,EAAYV,KAAKC,SAASO,wBAAwBd,MAClDiB,EAAYX,KAAKC,SAASW,cAAc,QAAQJ,wBAAwBd,MAE5EmB,QAAQC,IAAI,SAAUP,GACtBM,QAAQC,IAAI,YAAaJ,GACzBG,QAAQC,IAAI,YAAaH,GAEzB,IAAII,EAAWC,OAAOC,OAAO,GAAIjB,KAAKT,MAAMC,aAAc,CACtDC,KAAMc,GAAWG,EAAYC,GAAa,EAC1CjB,MAAOiB,IAGXX,KAAKkB,SAAS,CAAC1B,aAAcuB,O,+BAI7B,OACI,yBAAKI,cAAY,OAAOC,UAAU,qBAC9B,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,kBAAkBC,MAAOrB,KAAKT,MAAMC,qB,GAhEjD8B,IAAMC,YC0DbC,E,4MArDXjC,MAAQ,CACJJ,MAAM,YAAKD,EAAgBC,Q,oDAWzBsC,EAAMC,GACR,IAAIC,EAAS3B,KAAKT,MAAMJ,MAAMyC,KAAI,SAACC,GAE/B,OADAA,EAAMC,OAAUL,EAAKpC,QAAUwC,EAAMxC,MAC9BwC,KAEX7B,KAAKkB,SAAS,CAAC/B,MAAOwC,IACtB3B,KAAK+B,YAAcL,EAAIxB,S,8BAMlB,IAAD,OACJ,OAAOF,KAAKT,MAAMJ,MAAMyC,KAAI,SAACH,EAAMO,GAC/B,OACI,wBAAIC,QAAS,SAACC,GAAD,OAAO,EAAKC,MAAMV,EAAMS,IACjCd,UAAS,mBAAcK,EAAKK,OAAS,mBAAqB,IAC1DM,IAAKJ,GACL,uBAAGZ,UAAU,iBAAiBiB,KAAMZ,EAAKpC,OACrC,0BAAM+B,UAAU,kBAAkBK,EAAKrC,c,+BAWvD,OACI,yBAAKgC,UAAU,iBACX,wBAAIA,UAAU,YACTpB,KAAKb,SAEV,kBAAC,EAAD,CAASe,OAAQF,KAAK+B,mB,GAjDbT,IAAMC,WCAhBe,MANf,WACE,OACI,kBAAC,EAAD,OCMcC,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.836c15b7.chunk.js","sourcesContent":["const NavigationModel = {\r\n    items: [\r\n        {\r\n            label: 'Cupertino',\r\n            route: '#Cupertino'\r\n        },\r\n        {\r\n            label: 'New York City',\r\n            route: '#NewYorkCity'\r\n        },\r\n        {\r\n            label: 'London',\r\n            route: '#London'\r\n        },\r\n        {\r\n            label: 'Amsterdam',\r\n            route: '#Amsterdam'\r\n        },\r\n        {\r\n            label: 'Tokyo',\r\n            route: '#Tokyo'\r\n        },\r\n        {\r\n            label: 'Hong Kong',\r\n            route: '#HongKong'\r\n        },\r\n        {\r\n            label: 'Sydney',\r\n            route: '#Sydney'\r\n        },\r\n    ]\r\n};\r\n\r\nexport default NavigationModel;","import React from 'react';\r\nimport './Shuttle.scss';\r\n\r\n// todo: extract getLeftOffset into utility\r\n// todo: extract updateStyleProps into utility\r\n// todo: simplify render implementation (pure JS)\r\n\r\nclass Shuttle extends React.Component {\r\n\r\n    targetEl;\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', () => {\r\n            this.updateStyleProps()\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', () => {\r\n            this.updateStyleProps()\r\n        });\r\n    }\r\n\r\n    state = {\r\n        shuttleStyle: {\r\n            left: 0,\r\n            width: 0,\r\n        }\r\n    };\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.targetEl = props.target;\r\n\r\n        this.updateStyleProps();\r\n    }\r\n\r\n    getRelativeOffset(el) {\r\n        let ul = this.targetEl.parentElement;\r\n        let previousEl = ul.previousElementSibling;\r\n        let offset = 0;\r\n        while (previousEl) {\r\n            offset += previousEl.getBoundingClientRect().width;\r\n            previousEl = previousEl.previousElementSibling;\r\n        }\r\n        return offset;\r\n    }\r\n\r\n    updateStyleProps() {\r\n        if (!this.targetEl) return;\r\n\r\n        let offset = this.getRelativeOffset(this.targetEl);\r\n        let itemWidth = this.targetEl.getBoundingClientRect().width;\r\n        let textWidth = this.targetEl.querySelector('span').getBoundingClientRect().width;\r\n\r\n        console.log('offset', offset);\r\n        console.log('itemWidth', itemWidth);\r\n        console.log('textWidth', textWidth);\r\n\r\n        let newStyle = Object.assign({}, this.state.shuttleStyle, {\r\n            left: offset + ((itemWidth - textWidth) / 2),\r\n            width: textWidth\r\n        });\r\n\r\n        this.setState({shuttleStyle: newStyle});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div aria-hidden='true' className='shuttle-container'>\r\n                <div className=\"shuttle--rail\">\r\n                    <div className=\"shuttle--line\"></div>\r\n                    <div className=\"shuttle--slider\" style={this.state.shuttleStyle}></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Shuttle;\r\n","import React from 'react';\r\nimport './Navigation.scss';\r\nimport NavigationModel from \"../../models/NavigationModel\";\r\nimport Shuttle from \"../Shuttle/Shuttle\";\r\n\r\n// todo: extract item component into own class\r\n// todo: extract list component into own class\r\n// todo: create time fetch service\r\n// todo: crete time display component\r\n\r\nclass Navigation extends React.Component {\r\n\r\n    state = {\r\n        items: [...NavigationModel.items]\r\n    };\r\n\r\n    /**\r\n     * passed into child on click\r\n     */\r\n    clickTarget;\r\n\r\n    /**\r\n     * click handler\r\n     */\r\n    click(item, evt) {\r\n        let mapped = this.state.items.map((model) => {\r\n            model.active = (item.route === model.route);\r\n            return model;\r\n        });\r\n        this.setState({items: mapped});\r\n        this.clickTarget = evt.target;\r\n    }\r\n\r\n    /**\r\n     * list iterator\r\n     */\r\n    items() {\r\n        return this.state.items.map((item, index) => {\r\n            return (\r\n                <li onClick={(e) => this.click(item, e)}\r\n                    className={`nav-item ${item.active ? 'nav-item--active' : ''}`}\r\n                    key={index}>\r\n                    <a className=\"nav-item--link\" href={item.route}>\r\n                        <span className=\"nav-item--text\">{item.label}</span>\r\n                    </a>\r\n                </li>\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * container\r\n     */\r\n    render() {\r\n        return (\r\n            <nav className='nav-container'>\r\n                <ul className=\"nav-list\">\r\n                    {this.items()}\r\n                </ul>\r\n                <Shuttle target={this.clickTarget}/>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport './App.scss';\r\nimport Navigation from \"./components/Navigation/Navigation\";\r\n\r\nfunction App() {\r\n  return (\r\n      <Navigation></Navigation>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}